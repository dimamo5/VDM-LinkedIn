class LinkedIn

instance variables
	private people: set of Person :={};
	inv people <> {} => verifyMaxConnect();
operations
	-- LinkedIn contrutor
	public LinkedIn: () ==> LinkedIn
	LinkedIn() == (return self);
	
	--Adiciona uma pessoa à rede do LinkedIn
	public addPerson: Person ==> ()
	addPerson(p) ==
		people := people union {p}
	pre p not in set people
	post p in set people;
	
	--Pesquisa de um utilizador pelo seu nome
	public searchPerson: Utils`String ==> set of Person   --TODO ranked search and substring search
	searchPerson(name) ==
		return { person | person in set people & person.name = name};
		
	--Determinar a pessoa com mais contactos	
	public pure peopleWithMostConnects: () ==> Person
	peopleWithMostConnects()==(
		dcl r:nat :=0;
		dcl mostConnectedPerson: [Person] :=nil;
			
		for all p in set people do
			(if card p.connects > r
			then( mostConnectedPerson := p;
						r := card p.connects;
						)
			);
		return mostConnectedPerson;  --help como conto as pessoas com mais coneccoes
		)
		pre card people > 1;
		
		
		--Determinar os contactos em comum entre as duas pessoas passadas pelo argumento
		public pure commonPeople: Person * Person ==> set of Person
		commonPeople(person1,person2) ==
			return person1.connects inter person2.connects
			pre person1 in set people and person2 in set people;
			
		--Calcular as distancias entre duas pessoas usando um pesquisa em largura
		--Retorna -1 se as pessoas nao estiverem conectas em nenhum nivel
		--Retorna 0 se for a mesma pessoa
		--Retorna >0 caso contrário
		public distancePeople: Person * Person ==> int
		distancePeople(person1,person2) ==(
			dcl counter: nat1 := 1; --contador dos niveis que já passou
			dcl q: set of Person := person1.connects; --Pessoas a visitar
			dcl qVisited: set of Person := {}; --Pessoas já visitadas

			if person1 = person2 then return 0; --Se for a mesma pessoa
		
			-- enquanto a pessoa nao esta no set a pesquisar
			while person2 not in set q do (
				counter := counter + 1;
			
			-- Pesquisa do nivel
				for all person in set q do(
					qVisited:= qVisited union {person};
					q := q union person.connects \ qVisited;
				);
			
			-- evitar loop infinito
				if card q = 0 then
					return -1
			);
		
			--se for impossivel de alcancar retorna -1 caso contrario retorna o numero de niveis
			if person2 not in set q then
				return -1
			else
				return counter
		)
		pre person1 in set people and person2 in set people;
		
		--Retorna a média das distancias na rede
		public avgDistance: () ==> real
			avgDistance() ==(
			dcl distTotal:nat:=0;
			dcl num:nat:=0;
			dcl temp:nat:=0;
			for all person in set people do(
				for all connect in set people \ {person} do(
					temp:=distancePeople(person,connect);
					if temp >0 then(
					distTotal:=temp+distTotal;
					num:= num+1;
					)
				)
			);
			return distTotal/num;
		);
		
		public pure verifyMaxConnect:()==> bool
			verifyMaxConnect()==(
				for all p in set people do (
					if not p.connects subset people then return false
				);
				return true;
			);

end LinkedIn