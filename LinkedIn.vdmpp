class LinkedIn
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private people: set of Person :={};
operations
-- TODO Define operations here
	public LinkedIn: () ==> LinkedIn
	LinkedIn() == (return self);
	
	public addPerson: Person ==> ()
	addPerson(p) == 
	people := people union {p}
	pre p not in set people
	post p in set people;
	
	public searchPerson: Utils`String ==> set of Person
	searchPerson(name) ==
		return { person | person in set people & person.name = name};
		--pre name in set people.name;  //TODO
				--dcl r:set of Person := {};  --TODO ver se é trolha??? ask Tô
		--for all p in set people do
		--(if p.name=name
	--	then r:=r union {p}
		--);
		
		public pure peopleWithMostConnects: () ==> Person
		peopleWithMostConnects()==(
			dcl r:nat :=0;
			dcl mostConnectedPerson: [Person] :=nil;
				for all p in set people do
					(if card p.connects > r
					then mostConnectedPerson := p;
					);
			return mostConnectedPerson;  --help como conto as pessoas com mais coneccoes
		)
		pre card people > 0;
		
		public pure commonPeople: Person * Person ==> set of Person
		commonPeople(person1,person2) ==
			return person1.connects inter person2.connects;
			
		public distancePeople: Person * Person ==> nat1
		distancePeople(person1,person2) ==(
			dcl q: set of Person := person1.connects;
			dcl qVisited: set of Person := {};
			dcl counter: nat1 := 1;

			if person1 = person2 then
				return 0;
		
			-- while user2 is not in the search results
			while person2 not in set q do (
				counter := counter + 1;
			
			-- add to the search set the connections of the current users (add to the search the next level of the tree)
				for all person in set q do(
					qVisited:= qVisited union {person};
					q := q union person.connects \ qVisited;
				);
			
			-- to prevent an infinite loop
				if card q = 0 then
					return -1
			);
		
		-- if the two users are not reachable then it is returned INFINITY
			if person2 not in set q then
				return -1
			else
				return counter
		)
		pre person1 in set people and person2 in set people;
		

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end LinkedIn