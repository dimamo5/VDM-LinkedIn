class PersonTest is subclass of MyTestCase

operations
	private ConfigPerson: () ==> Person
	ConfigPerson() ==
		return new Person("teste");
	
	public testOtherCv:() ==> ()
	testOtherCv()==(
		dcl p : Person := ConfigPerson();
		p.addOtherCV("ola");
		assertEqual("ola",p.other);
		p.addOtherCV("1");
		assertEqual("ola1",p.other);
	);
	
	public testSkill:() ==> ()
	testSkill() ==(
		dcl p : Person := ConfigPerson();
		p.myCommendations.addSkill("JS");
		assertTrue("JS" in set dom p.myCommendations.commList);
		p.myCommendations.removeSkill("JS");
		assertTrue("JS" not in set dom p.myCommendations.commList);
		
	);
	
	public testRecomendation:() ==> ()
	testRecomendation()==(
		dcl p : Person := ConfigPerson();
		dcl p1 : Person := new Person("x");
		p.addConnect(p1);
		
		p.myCommendations.addSkill("JS");
		p.addCommendation(p1,"JS");
		assertEqual(p.myCommendations.commList("JS"),{p1});
		
		p.removeCommendation(p1,"JS");
		assertEqual(p.myCommendations.commList("JS"),{});
	);
	
	public testAcadExp:() ==> ()
		testAcadExp()==(
			dcl p : Person := ConfigPerson();
			dcl aca : AcademicEducation:= p.addAcademicEducation("FEUP","MIEIC",2018);
			assertEqual(p.academics,{aca});
			p.removeAcademicEducationObj(aca);
			assertEqual(p.academics,{});
		);
		
	public testExp:() ==> ()
		testExp()==(
			dcl p : Person := ConfigPerson();
			dcl exp : Experience:= p.addExperience("MUNDO","CEO","O BOSS");
			assertEqual(p.experiences,{exp});
			p.removeExperience(exp);
			assertEqual(p.experiences,{});
		);

end PersonTest