class LinkedInTest is subclass of TestCase
	--linkedIn: LinkedIn := new LinkedIn();
operations
		--dcl diogo: Person := new Person("diogo");
		--dcl magalhaes: Person := new Person("magalhaes");
		--dcl moura: Person := new Person("moura");
		-- ines: Person := new Person("ines");
		--dcl alexandra: Person := new Person("alexandra");
		--dcl carneiro: Person := new Person("carneiro");
		--dcl sergio: Person := new Person("sergio");
		--dcl augusto: Person := new Person("augusto");
		-- domingues: Person := new Person("domingues");
	private ConfigLinkedIn: set of Person ==> LinkedIn
	ConfigLinkedIn(people) ==
	(
		dcl linkedIn:LinkedIn := new LinkedIn();
		for all p in set people do 
			linkedIn.addPerson(p);
		return linkedIn;
	);
	
	public testSearch : () ==> ()
	testSearch() ==(
		dcl linkedIn : LinkedIn := ConfigLinkedIn({new Person("diogo")});
		dcl result:set of Person := linkedIn.searchPerson("diogo");
		assertTrue(card result = 1);
	);
	
	public testCommonPeople : () ==> ()
	testCommonPeople() ==(
		dcl diogo: Person := new Person("diogo");
		dcl magalhaes: Person := new Person("magalhaes");
		dcl ines: Person := new Person("ines");
		dcl linkedIn : LinkedIn := ConfigLinkedIn({diogo,magalhaes,ines});
		diogo.addConnect(magalhaes);
		ines.addConnect(magalhaes);
		
		assertTrue(linkedIn.commonPeople(ines,diogo) = {magalhaes});
	);
	
	public testPeopleMostConnects : () ==> ()
	testPeopleMostConnects() ==(
		dcl diogo: Person := new Person("diogo");
		dcl magalhaes: Person := new Person("magalhaes");
		dcl ines: Person := new Person("ines");
		dcl linkedIn : LinkedIn;
		diogo.addConnect(magalhaes);
		diogo.addConnect(ines);
		linkedIn:=ConfigLinkedIn({diogo,magalhaes,ines});
				
		assertEqual(diogo,linkedIn.peopleWithMostConnects());
	);
	
	public testAverageDistance : () ==> ()
	testAverageDistance() ==(
		dcl diogo: Person := new Person("diogo");
		dcl magalhaes: Person := new Person("magalhaes");
		dcl ines: Person := new Person("ines");
		dcl linkedIn : LinkedIn := ConfigLinkedIn({diogo,magalhaes,ines});
		diogo.addConnect(magalhaes);
		diogo.addConnect(ines);
		magalhaes.addConnect(ines);
	
		assertEqual(1,linkedIn.avgDistance());
	);
	
	public testDistanceBetweenPeople : () ==> ()
	testDistanceBetweenPeople() ==(
		dcl diogo: Person := new Person("diogo");
		dcl magalhaes: Person := new Person("magalhaes");
		dcl ines: Person := new Person("ines");
		dcl moura: Person := new Person("moura");
		dcl linkedIn : LinkedIn := ConfigLinkedIn({diogo,magalhaes,ines,moura});
		diogo.addConnect(magalhaes);
		magalhaes.addConnect(ines);
	
		assertEqual(2,linkedIn.distancePeople(diogo,ines));
		assertEqual(0,linkedIn.distancePeople(diogo,diogo));
		assertEqual(1,linkedIn.distancePeople(diogo,magalhaes));
		assertEqual(-1,linkedIn.distancePeople(diogo,moura));
	);
	
	
  public static main: () ==> ()
  main() == (
  		dcl liTest : LinkedInTest := new LinkedInTest();
  		liTest.testSearch();
  		liTest.testCommonPeople();
  		liTest.testPeopleMostConnects();
  		liTest.testDistanceBetweenPeople();
  		liTest.testAverageDistance();
  		
  );
  
  
end LinkedInTest