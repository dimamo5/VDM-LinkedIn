

class Commendations
types
-- TODO Define types here
public Skill = Utils`String;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
public commList: inmap Skill to set of Person := { |-> };

operations
-- TODO Define operations here
public Commendations: () ==> Commendations
Commendations() == (return self);

public pure canRecommend: Person * Skill ==> bool  
	canRecommend(person,skill)==(
			return skill in set dom commList and  
			person not in set commList(skill); --nao pode recomendar >1 vez a mesma skill tal como no linkedin
	);
	
public addRecomendation: Person * Skill ==> ()
	addRecomendation(person,skill)==
		 commList:= commList ++ { skill |-> commList(skill) union {person}} 
		pre dom commList <> {} 	--o inmap não deve estar vazio
		post person in set commList(skill);  
	
public removeRecommendation: Person * Skill ==> ()
	removeRecommendation(person,skill) == 
		commList(skill) := commList(skill) \ {person}  --todo ver se isto pinta / é trolha
		pre skill in set dom commList 
			and person in set commList(skill)
		post commList <> commList~ 
			and person not in set commList(skill);

public addSkill: Skill ==> ()
	addSkill(skill)==
		commList:= commList munion {skill |-> {} }
	pre skill not in set dom commList
	post commList <> commList~
		and skill in set dom commList; 

public removeSkill: Skill ==> ()
	removeSkill(skill) ==
		commList := {skill} <-: commList
		pre skill in set dom commList
		post skill not in set dom commList;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Commendations