class Commendations
types
	public Skill = Utils`String;
instance variables
	public commList: inmap Skill to set of Person := { |-> };
operations
	-- Construtor Recomendacoes
	public Commendations: () ==> Commendations
		Commendations() == (return self);

	--Verifica se uma pessoa pode recomendar uma competencia 
	public pure canRecommend: Person * Skill ==> bool  
		canRecommend(person,skill)==(
			return skill in set dom commList and  
			person not in set commList(skill); --nao pode recomendar >1 vez a mesma skill tal como no linkedin
		);
	
	--Adiciona uma recomendacao a uma competencia
	public addRecomendation: Person * Skill ==> ()
		addRecomendation(person,skill)==
		 commList:= commList ++ { skill |-> commList(skill) union {person}} 
		pre dom commList <> {} 	--o inmap não deve estar vazio
		post person in set commList(skill);  
	
	--Remove uma recomendacao a uma competencia
	public removeRecommendation: Person * Skill ==> ()
		removeRecommendation(person,skill) == 
			commList(skill) := commList(skill) \ {person}  --todo ver se isto pinta / é trolha
		pre skill in set dom commList 
			and person in set commList(skill)
		post commList <> commList~ 
			and person not in set commList(skill);
	
	--Adiciona uma competencia
	public addSkill: Skill ==> ()
		addSkill(skill)==
			commList:= commList munion {skill |-> {} }
		pre skill not in set dom commList
		post commList <> commList~
		and skill in set dom commList; 

	--Remove uma competencia
	public removeSkill: Skill ==> ()
		removeSkill(skill) ==
			commList := {skill} <-: commList
		pre skill in set dom commList
		post skill not in set dom commList;

end Commendations