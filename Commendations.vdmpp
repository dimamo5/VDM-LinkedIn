class Commendations
types
-- TODO Define types here
public Skill = Utils`String;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
private commList: inmap Skill to set of Person := { |-> };

operations
-- TODO Define operations here
public Commendations: () ==> Commendations
Commendations() == (return self);

public pure canRecommend: Person * Skill ==> bool
	canRecommend(person,skill)==(
			return skill not in set dom commList or
			person not in set commList(skill);
	);
	
public addRecomendation: Person * Skill ==> ()
	addRecomendation(person,skill)==
		if skill in set dom commList then commList:= commList ++ { skill |-> commList(skill) union {person}} 
		else commList:= commList munion {skill |-> {person} };
	
--TODO operation to add empty commendation (representing some skill of Person withou commendations yet)
--TODO operation to add commendation to some skill
--commList := commList munion {skill |-> person}

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Commendations